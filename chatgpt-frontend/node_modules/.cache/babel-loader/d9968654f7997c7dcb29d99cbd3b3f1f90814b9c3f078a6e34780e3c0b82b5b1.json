{"ast":null,"code":"import React,{useState}from'react';import'./Chatbot.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatbot=()=>{const[messages,setMessages]=useState([]);const[query,setQuery]=useState('');const[loading,setLoading]=useState(false);const[searchEnabled,setSearchEnabled]=useState(false);const[darkMode,setDarkMode]=useState(false);const handleToggleSearch=()=>{setSearchEnabled(!searchEnabled);};const handleToggleDarkMode=()=>{setDarkMode(!darkMode);};const handleSubmit=async e=>{e.preventDefault();setLoading(true);const userMessage={sender:'user',text:query};setMessages(prevMessages=>[...prevMessages,userMessage]);if(searchEnabled){const[companyResponse,gptResponse]=await Promise.all([fetch('http://localhost:8000/getApi',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})}).then(res=>res.json()),fetch('http://localhost:8000/getResponse',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})}).then(res=>res.json())]);streamResponses(formatCompanyResponse(companyResponse),formatOpenAiResponse(gptResponse.response));}else{const gptResponse=await fetch('http://localhost:8000/getResponse',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})}).then(res=>res.json());streamResponses(null,formatOpenAiResponse(gptResponse.response));}setQuery('');setLoading(false);};const streamResponses=(companyResponse,openAiResponse)=>{const companyParts=companyResponse?companyResponse.split(' '):[];const openAiParts=openAiResponse.split(' ');let streamedCompany='';let streamedOpenAi='';if(companyResponse){companyParts.forEach((part,i)=>{setTimeout(()=>{streamedCompany+=part+' ';const botMessage={sender:'bot',company:streamedCompany,openAi:streamedOpenAi};setMessages(prevMessages=>{const lastMessage=prevMessages[prevMessages.length-1];if(lastMessage.sender==='user'){return[...prevMessages,botMessage];}else{return[...prevMessages.slice(0,-1),botMessage];}});},i*100);});}openAiParts.forEach((part,i)=>{setTimeout(()=>{streamedOpenAi+=part+' ';const botMessage={sender:'bot',company:streamedCompany,openAi:streamedOpenAi};setMessages(prevMessages=>{const lastMessage=prevMessages[prevMessages.length-1];if(lastMessage.sender==='user'){return[...prevMessages,botMessage];}else{return[...prevMessages.slice(0,-1),botMessage];}});},(companyParts.length+i)*100);});};const formatCompanyResponse=response=>{if(response.data&&response.data.response_text){const paragraphs=response.data.response_text.split('\\n').map(paragraph=>\"<p>\".concat(paragraph,\"</p>\")).join('');const urls=response.data.web_url.map(url=>\"<a href=\\\"\".concat(url,\"\\\" target=\\\"_blank\\\">\").concat(url,\"</a>\")).join('<br/>');return\"\".concat(paragraphs,\"<br/><br/>Sources:<br/>\").concat(urls);}return JSON.stringify(response);};const formatOpenAiResponse=response=>{const paragraphs=response.split('\\n').map(paragraph=>\"<p>\".concat(paragraph,\"</p>\")).join('');return paragraphs;};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot \".concat(darkMode?'dark-mode':'light-mode'),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"toggle-container\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"toggle-label\",children:\"Enable Search\"}),/*#__PURE__*/_jsxs(\"label\",{className:\"toggle-switch\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:searchEnabled,onChange:handleToggleSearch}),/*#__PURE__*/_jsx(\"span\",{className:\"slider\"})]}),/*#__PURE__*/_jsx(\"label\",{className:\"toggle-label\",children:\"Dark Mode\"}),/*#__PURE__*/_jsxs(\"label\",{className:\"toggle-switch\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:darkMode,onChange:handleToggleDarkMode}),/*#__PURE__*/_jsx(\"span\",{className:\"slider\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",children:[messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(msg.sender),children:msg.sender==='bot'?/*#__PURE__*/_jsxs(\"div\",{className:\"message-content bot-message\",children:[/*#__PURE__*/_jsx(\"div\",{dangerouslySetInnerHTML:{__html:\"<p><strong>OpenAI Response:</strong><br/>\".concat(msg.openAi,\"</p>\")}}),msg.company&&/*#__PURE__*/_jsx(\"div\",{dangerouslySetInnerHTML:{__html:\"<p><strong>Company Response:</strong><br/>\".concat(msg.company,\"</p>\")}})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"message-content user-message\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"User:\"}),\" \",msg.text]})},index)),loading&&/*#__PURE__*/_jsx(\"p\",{className:\"loading\",children:\"Loading...\"})]}),!loading&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:query,onChange:e=>setQuery(e.target.value),placeholder:\"Type your message...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]}),/*#__PURE__*/_jsx(\"footer\",{className:\"footer\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Made by Vishanth \"})})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Chatbot","messages","setMessages","query","setQuery","loading","setLoading","searchEnabled","setSearchEnabled","darkMode","setDarkMode","handleToggleSearch","handleToggleDarkMode","handleSubmit","e","preventDefault","userMessage","sender","text","prevMessages","companyResponse","gptResponse","Promise","all","fetch","method","headers","body","JSON","stringify","then","res","json","streamResponses","formatCompanyResponse","formatOpenAiResponse","response","openAiResponse","companyParts","split","openAiParts","streamedCompany","streamedOpenAi","forEach","part","i","setTimeout","botMessage","company","openAi","lastMessage","length","slice","data","response_text","paragraphs","map","paragraph","concat","join","urls","web_url","url","className","children","type","checked","onChange","msg","index","dangerouslySetInnerHTML","__html","onSubmit","value","target","placeholder"],"sources":["/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const userMessage = { sender: 'user', text: query };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    if (searchEnabled) {\n      const [companyResponse, gptResponse] = await Promise.all([\n        fetch('http://localhost:8000/getApi', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json()),\n        fetch('http://localhost:8000/getResponse', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json())\n      ]);\n\n      streamResponses(formatCompanyResponse(companyResponse), formatOpenAiResponse(gptResponse.response));\n    } else {\n      const gptResponse = await fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query })\n      }).then(res => res.json());\n\n      streamResponses(null, formatOpenAiResponse(gptResponse.response));\n    }\n\n    setQuery('');\n    setLoading(false);\n  };\n\n  const streamResponses = (companyResponse, openAiResponse) => {\n    const companyParts = companyResponse ? companyResponse.split(' ') : [];\n    const openAiParts = openAiResponse.split(' ');\n\n    let streamedCompany = '';\n    let streamedOpenAi = '';\n\n    if (companyResponse) {\n      companyParts.forEach((part, i) => {\n        setTimeout(() => {\n          streamedCompany += part + ' ';\n          const botMessage = {\n            sender: 'bot',\n            company: streamedCompany,\n            openAi: streamedOpenAi\n          };\n          setMessages((prevMessages) => {\n            const lastMessage = prevMessages[prevMessages.length - 1];\n            if (lastMessage.sender === 'user') {\n              return [...prevMessages, botMessage];\n            } else {\n              return [...prevMessages.slice(0, -1), botMessage];\n            }\n          });\n        }, i * 100);\n      });\n    }\n\n    openAiParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedOpenAi += part + ' ';\n        const botMessage = {\n          sender: 'bot',\n          company: streamedCompany,\n          openAi: streamedOpenAi\n        };\n        setMessages((prevMessages) => {\n          const lastMessage = prevMessages[prevMessages.length - 1];\n          if (lastMessage.sender === 'user') {\n            return [...prevMessages, botMessage];\n          } else {\n            return [...prevMessages.slice(0, -1), botMessage];\n          }\n        });\n      }, (companyParts.length + i) * 100);\n    });\n  };\n\n  const formatCompanyResponse = (response) => {\n    if (response.data && response.data.response_text) {\n      const paragraphs = response.data.response_text.split('\\n').map(paragraph => `<p>${paragraph}</p>`).join('');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join('<br/>');\n      return `${paragraphs}<br/><br/>Sources:<br/>${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n\n  const formatOpenAiResponse = (response) => {\n    const paragraphs = response.split('\\n').map(paragraph => `<p>${paragraph}</p>`).join('');\n    return paragraphs;\n  };\n\n  return (\n    <div className={`chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <div className=\"toggle-container\">\n          <label className=\"toggle-label\">Enable Search</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={searchEnabled} onChange={handleToggleSearch} />\n            <span className=\"slider\"></span>\n          </label>\n          <label className=\"toggle-label\">Dark Mode</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={handleToggleDarkMode} />\n            <span className=\"slider\"></span>\n          </label>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' ? (\n                <div className=\"message-content bot-message\">\n                  <div dangerouslySetInnerHTML={{ __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` }} />\n                  {msg.company && (\n                    <div dangerouslySetInnerHTML={{ __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>` }} />\n                  )}\n                </div>\n              ) : (\n                <div className=\"message-content user-message\">\n                  <strong>User:</strong> {msg.text}\n                </div>\n              )}\n            </div>\n          ))}\n          {loading && <p className=\"loading\">Loading...</p>}\n        </div>\n        {!loading && (\n          <form onSubmit={handleSubmit} className=\"chat-input\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Type your message...\"\n            />\n            <button type=\"submit\">Send</button>\n          </form>\n        )}\n      </div>\n      <footer className=\"footer\">\n        <p>Made by Vishanth </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvB,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACQ,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACY,aAAa,CAAEC,gBAAgB,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAACc,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CAE/C,KAAM,CAAAgB,kBAAkB,CAAGA,CAAA,GAAM,CAC/BH,gBAAgB,CAAC,CAACD,aAAa,CAAC,CAClC,CAAC,CAED,KAAM,CAAAK,oBAAoB,CAAGA,CAAA,GAAM,CACjCF,WAAW,CAAC,CAACD,QAAQ,CAAC,CACxB,CAAC,CAED,KAAM,CAAAI,YAAY,CAAG,KAAO,CAAAC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBT,UAAU,CAAC,IAAI,CAAC,CAEhB,KAAM,CAAAU,WAAW,CAAG,CAAEC,MAAM,CAAE,MAAM,CAAEC,IAAI,CAAEf,KAAM,CAAC,CACnDD,WAAW,CAAEiB,YAAY,EAAK,CAAC,GAAGA,YAAY,CAAEH,WAAW,CAAC,CAAC,CAE7D,GAAIT,aAAa,CAAE,CACjB,KAAM,CAACa,eAAe,CAAEC,WAAW,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CAAC,8BAA8B,CAAE,CACpCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAE1B,KAAM,CAAC,CAChC,CAAC,CAAC,CAAC2B,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAC1BR,KAAK,CAAC,mCAAmC,CAAE,CACzCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAE1B,KAAM,CAAC,CAChC,CAAC,CAAC,CAAC2B,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3B,CAAC,CAEFC,eAAe,CAACC,qBAAqB,CAACd,eAAe,CAAC,CAAEe,oBAAoB,CAACd,WAAW,CAACe,QAAQ,CAAC,CAAC,CACrG,CAAC,IAAM,CACL,KAAM,CAAAf,WAAW,CAAG,KAAM,CAAAG,KAAK,CAAC,mCAAmC,CAAE,CACnEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAE1B,KAAM,CAAC,CAChC,CAAC,CAAC,CAAC2B,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAE1BC,eAAe,CAAC,IAAI,CAAEE,oBAAoB,CAACd,WAAW,CAACe,QAAQ,CAAC,CAAC,CACnE,CAEAhC,QAAQ,CAAC,EAAE,CAAC,CACZE,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAED,KAAM,CAAA2B,eAAe,CAAGA,CAACb,eAAe,CAAEiB,cAAc,GAAK,CAC3D,KAAM,CAAAC,YAAY,CAAGlB,eAAe,CAAGA,eAAe,CAACmB,KAAK,CAAC,GAAG,CAAC,CAAG,EAAE,CACtE,KAAM,CAAAC,WAAW,CAAGH,cAAc,CAACE,KAAK,CAAC,GAAG,CAAC,CAE7C,GAAI,CAAAE,eAAe,CAAG,EAAE,CACxB,GAAI,CAAAC,cAAc,CAAG,EAAE,CAEvB,GAAItB,eAAe,CAAE,CACnBkB,YAAY,CAACK,OAAO,CAAC,CAACC,IAAI,CAAEC,CAAC,GAAK,CAChCC,UAAU,CAAC,IAAM,CACfL,eAAe,EAAIG,IAAI,CAAG,GAAG,CAC7B,KAAM,CAAAG,UAAU,CAAG,CACjB9B,MAAM,CAAE,KAAK,CACb+B,OAAO,CAAEP,eAAe,CACxBQ,MAAM,CAAEP,cACV,CAAC,CACDxC,WAAW,CAAEiB,YAAY,EAAK,CAC5B,KAAM,CAAA+B,WAAW,CAAG/B,YAAY,CAACA,YAAY,CAACgC,MAAM,CAAG,CAAC,CAAC,CACzD,GAAID,WAAW,CAACjC,MAAM,GAAK,MAAM,CAAE,CACjC,MAAO,CAAC,GAAGE,YAAY,CAAE4B,UAAU,CAAC,CACtC,CAAC,IAAM,CACL,MAAO,CAAC,GAAG5B,YAAY,CAACiC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAEL,UAAU,CAAC,CACnD,CACF,CAAC,CAAC,CACJ,CAAC,CAAEF,CAAC,CAAG,GAAG,CAAC,CACb,CAAC,CAAC,CACJ,CAEAL,WAAW,CAACG,OAAO,CAAC,CAACC,IAAI,CAAEC,CAAC,GAAK,CAC/BC,UAAU,CAAC,IAAM,CACfJ,cAAc,EAAIE,IAAI,CAAG,GAAG,CAC5B,KAAM,CAAAG,UAAU,CAAG,CACjB9B,MAAM,CAAE,KAAK,CACb+B,OAAO,CAAEP,eAAe,CACxBQ,MAAM,CAAEP,cACV,CAAC,CACDxC,WAAW,CAAEiB,YAAY,EAAK,CAC5B,KAAM,CAAA+B,WAAW,CAAG/B,YAAY,CAACA,YAAY,CAACgC,MAAM,CAAG,CAAC,CAAC,CACzD,GAAID,WAAW,CAACjC,MAAM,GAAK,MAAM,CAAE,CACjC,MAAO,CAAC,GAAGE,YAAY,CAAE4B,UAAU,CAAC,CACtC,CAAC,IAAM,CACL,MAAO,CAAC,GAAG5B,YAAY,CAACiC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAEL,UAAU,CAAC,CACnD,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,CAACT,YAAY,CAACa,MAAM,CAAGN,CAAC,EAAI,GAAG,CAAC,CACrC,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAX,qBAAqB,CAAIE,QAAQ,EAAK,CAC1C,GAAIA,QAAQ,CAACiB,IAAI,EAAIjB,QAAQ,CAACiB,IAAI,CAACC,aAAa,CAAE,CAChD,KAAM,CAAAC,UAAU,CAAGnB,QAAQ,CAACiB,IAAI,CAACC,aAAa,CAACf,KAAK,CAAC,IAAI,CAAC,CAACiB,GAAG,CAACC,SAAS,QAAAC,MAAA,CAAUD,SAAS,QAAM,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC,CAC3G,KAAM,CAAAC,IAAI,CAAGxB,QAAQ,CAACiB,IAAI,CAACQ,OAAO,CAACL,GAAG,CAACM,GAAG,eAAAJ,MAAA,CAAgBI,GAAG,0BAAAJ,MAAA,CAAqBI,GAAG,QAAM,CAAC,CAACH,IAAI,CAAC,OAAO,CAAC,CAC1G,SAAAD,MAAA,CAAUH,UAAU,4BAAAG,MAAA,CAA0BE,IAAI,EACpD,CACA,MAAO,CAAAhC,IAAI,CAACC,SAAS,CAACO,QAAQ,CAAC,CACjC,CAAC,CAED,KAAM,CAAAD,oBAAoB,CAAIC,QAAQ,EAAK,CACzC,KAAM,CAAAmB,UAAU,CAAGnB,QAAQ,CAACG,KAAK,CAAC,IAAI,CAAC,CAACiB,GAAG,CAACC,SAAS,QAAAC,MAAA,CAAUD,SAAS,QAAM,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC,CACxF,MAAO,CAAAJ,UAAU,CACnB,CAAC,CAED,mBACExD,KAAA,QAAKgE,SAAS,YAAAL,MAAA,CAAajD,QAAQ,CAAG,WAAW,CAAG,YAAY,CAAG,CAAAuD,QAAA,eACjEjE,KAAA,QAAKgE,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BjE,KAAA,QAAKgE,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC/BnE,IAAA,UAAOkE,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,eAAa,CAAO,CAAC,cACrDjE,KAAA,UAAOgE,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC9BnE,IAAA,UAAOoE,IAAI,CAAC,UAAU,CAACC,OAAO,CAAE3D,aAAc,CAAC4D,QAAQ,CAAExD,kBAAmB,CAAE,CAAC,cAC/Ed,IAAA,SAAMkE,SAAS,CAAC,QAAQ,CAAO,CAAC,EAC3B,CAAC,cACRlE,IAAA,UAAOkE,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,WAAS,CAAO,CAAC,cACjDjE,KAAA,UAAOgE,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC9BnE,IAAA,UAAOoE,IAAI,CAAC,UAAU,CAACC,OAAO,CAAEzD,QAAS,CAAC0D,QAAQ,CAAEvD,oBAAqB,CAAE,CAAC,cAC5Ef,IAAA,SAAMkE,SAAS,CAAC,QAAQ,CAAO,CAAC,EAC3B,CAAC,EACL,CAAC,cACNhE,KAAA,QAAKgE,SAAS,CAAC,aAAa,CAAAC,QAAA,EACzB/D,QAAQ,CAACuD,GAAG,CAAC,CAACY,GAAG,CAAEC,KAAK,gBACvBxE,IAAA,QAAiBkE,SAAS,YAAAL,MAAA,CAAaU,GAAG,CAACnD,MAAM,CAAG,CAAA+C,QAAA,CACjDI,GAAG,CAACnD,MAAM,GAAK,KAAK,cACnBlB,KAAA,QAAKgE,SAAS,CAAC,6BAA6B,CAAAC,QAAA,eAC1CnE,IAAA,QAAKyE,uBAAuB,CAAE,CAAEC,MAAM,6CAAAb,MAAA,CAA8CU,GAAG,CAACnB,MAAM,QAAO,CAAE,CAAE,CAAC,CACzGmB,GAAG,CAACpB,OAAO,eACVnD,IAAA,QAAKyE,uBAAuB,CAAE,CAAEC,MAAM,8CAAAb,MAAA,CAA+CU,GAAG,CAACpB,OAAO,QAAO,CAAE,CAAE,CAC5G,EACE,CAAC,cAENjD,KAAA,QAAKgE,SAAS,CAAC,8BAA8B,CAAAC,QAAA,eAC3CnE,IAAA,WAAAmE,QAAA,CAAQ,OAAK,CAAQ,CAAC,IAAC,CAACI,GAAG,CAAClD,IAAI,EAC7B,CACN,EAZOmD,KAaL,CACN,CAAC,CACDhE,OAAO,eAAIR,IAAA,MAAGkE,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAC,YAAU,CAAG,CAAC,EAC9C,CAAC,CACL,CAAC3D,OAAO,eACPN,KAAA,SAAMyE,QAAQ,CAAE3D,YAAa,CAACkD,SAAS,CAAC,YAAY,CAAAC,QAAA,eAClDnE,IAAA,UACEoE,IAAI,CAAC,MAAM,CACXQ,KAAK,CAAEtE,KAAM,CACbgE,QAAQ,CAAGrD,CAAC,EAAKV,QAAQ,CAACU,CAAC,CAAC4D,MAAM,CAACD,KAAK,CAAE,CAC1CE,WAAW,CAAC,sBAAsB,CACnC,CAAC,cACF9E,IAAA,WAAQoE,IAAI,CAAC,QAAQ,CAAAD,QAAA,CAAC,MAAI,CAAQ,CAAC,EAC/B,CACP,EACE,CAAC,cACNnE,IAAA,WAAQkE,SAAS,CAAC,QAAQ,CAAAC,QAAA,cACxBnE,IAAA,MAAAmE,QAAA,CAAG,mBAAiB,CAAG,CAAC,CAClB,CAAC,EACN,CAAC,CAEV,CAAC,CAED,cAAe,CAAAhE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}