{"ast":null,"code":"var _jsxFileName = \"/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const userMessage = {\n      sender: 'user',\n      text: query\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    const gptResponse = await fetch('http://localhost:8000/getResponse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    }).then(res => res.json());\n    streamOpenAiResponse(gptResponse.response);\n    if (searchEnabled) {\n      const companyResponse = await fetch('http://localhost:8000/getApi', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json());\n      streamCompanyResponse(formatCompanyResponse(companyResponse));\n    }\n    setQuery('');\n    setLoading(false);\n  };\n  const streamOpenAiResponse = responseText => {\n    const parts = responseText.split(\" \");\n    let openAiResponse = \"\";\n    parts.forEach((part, i) => {\n      setTimeout(() => {\n        openAiResponse += part + \" \";\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.openAi = openAiResponse;\n          return updatedMessages;\n        });\n      }, i * 100); // Adjust the speed by changing the timeout duration\n    });\n  };\n  const streamCompanyResponse = responseText => {\n    const parts = responseText.split(\" \");\n    let companyResponse = \"\";\n    parts.forEach((part, i) => {\n      setTimeout(() => {\n        companyResponse += part + \" \";\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.company = companyResponse;\n          return updatedMessages;\n        });\n      }, i * 100); // Adjust the speed by changing the timeout duration\n    });\n  };\n  const formatCompanyResponse = response => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, ' ');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join(' ');\n      return `${text} Sources: ${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Enable Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: searchEnabled,\n            onChange: handleToggleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: darkMode,\n            onChange: handleToggleDarkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.sender === 'bot' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content bot-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), msg.company && /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content user-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this), \" \", msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), !loading && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Made by Vishanth hearsymbol\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"py7Yd9iHL7CmNrBdskWH5+K4nZ4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","query","setQuery","loading","setLoading","searchEnabled","setSearchEnabled","darkMode","setDarkMode","handleToggleSearch","handleToggleDarkMode","handleSubmit","e","preventDefault","userMessage","sender","text","prevMessages","gptResponse","fetch","method","headers","body","JSON","stringify","then","res","json","streamOpenAiResponse","response","companyResponse","streamCompanyResponse","formatCompanyResponse","responseText","parts","split","openAiResponse","forEach","part","i","setTimeout","updatedMessages","lastMessage","length","openAi","company","data","response_text","replace","urls","web_url","map","url","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","msg","index","dangerouslySetInnerHTML","__html","onSubmit","value","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const userMessage = { sender: 'user', text: query };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    const gptResponse = await fetch('http://localhost:8000/getResponse', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query })\n    }).then(res => res.json());\n\n    streamOpenAiResponse(gptResponse.response);\n\n    if (searchEnabled) {\n      const companyResponse = await fetch('http://localhost:8000/getApi', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query })\n      }).then(res => res.json());\n\n      streamCompanyResponse(formatCompanyResponse(companyResponse));\n    }\n\n    setQuery('');\n    setLoading(false);\n  };\n\n  const streamOpenAiResponse = (responseText) => {\n    const parts = responseText.split(\" \");\n    let openAiResponse = \"\";\n\n    parts.forEach((part, i) => {\n      setTimeout(() => {\n        openAiResponse += part + \" \";\n        setMessages((prevMessages) => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.openAi = openAiResponse;\n          return updatedMessages;\n        });\n      }, i * 100);  // Adjust the speed by changing the timeout duration\n    });\n  };\n\n  const streamCompanyResponse = (responseText) => {\n    const parts = responseText.split(\" \");\n    let companyResponse = \"\";\n\n    parts.forEach((part, i) => {\n      setTimeout(() => {\n        companyResponse += part + \" \";\n        setMessages((prevMessages) => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.company = companyResponse;\n          return updatedMessages;\n        });\n      }, i * 100);  // Adjust the speed by changing the timeout duration\n    });\n  };\n\n  const formatCompanyResponse = (response) => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, ' ');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join(' ');\n      return `${text} Sources: ${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n\n  return (\n    <div className={`chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <div className=\"toggle-container\">\n          <label className=\"toggle-label\">Enable Search</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={searchEnabled} onChange={handleToggleSearch} />\n            <span className=\"slider\"></span>\n          </label>\n          <label className=\"toggle-label\">Dark Mode</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={handleToggleDarkMode} />\n            <span className=\"slider\"></span>\n          </label>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' ? (\n                <div className=\"message-content bot-message\">\n                  <div dangerouslySetInnerHTML={{ __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` }} />\n                  {msg.company && (\n                    <div dangerouslySetInnerHTML={{ __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>` }} />\n                  )}\n                </div>\n              ) : (\n                <div className=\"message-content user-message\">\n                  <strong>User:</strong> {msg.text}\n                </div>\n              )}\n            </div>\n          ))}\n          {loading && <p className=\"loading\">Loading...</p>}\n        </div>\n        {!loading && (\n          <form onSubmit={handleSubmit} className=\"chat-input\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Type your message...\"\n            />\n            <button type=\"submit\">Send</button>\n          </form>\n        )}\n      </div>\n      <footer className=\"footer\">\n        <p>Made by Vishanth hearsymbol</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}