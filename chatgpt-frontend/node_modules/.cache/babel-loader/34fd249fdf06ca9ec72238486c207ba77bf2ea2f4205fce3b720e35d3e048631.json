{"ast":null,"code":"var _jsxFileName = \"/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const userMessage = {\n      sender: 'user',\n      text: query\n    };\n    setMessages([...messages, userMessage]);\n    if (searchEnabled) {\n      const [companyResponse, gptResponse] = await Promise.all([fetch('http://localhost:8000/getApi', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json()), fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json())]);\n      const botMessage = {\n        sender: 'bot',\n        company: formatCompanyResponse(companyResponse),\n        openAi: gptResponse.response\n      };\n      setMessages([...messages, userMessage, botMessage]);\n    } else {\n      const response = await fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      const data = await response.json();\n      const parts = data.response.split(\" \");\n      let openAiResponse = \"\";\n      for (let i = 0; i < parts.length; i++) {\n        setTimeout(() => {\n          openAiResponse += parts[i] + \" \";\n          const botMessage = {\n            sender: 'bot',\n            company: null,\n            openAi: openAiResponse\n          };\n          setMessages(prevMessages => [...prevMessages.slice(0, -1), botMessage]);\n        }, i * 100); // Adjust the speed by changing the timeout duration\n      }\n    }\n    setQuery('');\n    setLoading(false);\n  };\n  const formatCompanyResponse = response => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, '<br/>');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join('<br/>');\n      return `${text}<br/><br/>Sources:<br/>${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.sender === 'bot' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content bot-message\",\n            dangerouslySetInnerHTML: {\n              __html: searchEnabled ? `<p><strong>Company Response:</strong><br/>${msg.company}</p><p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` : `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content user-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this), \" \", msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"toggle-label\",\n            children: \"Enable Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"toggle-switch\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: searchEnabled,\n              onChange: handleToggleSearch\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"slider\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: query,\n            onChange: e => setQuery(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mode-toggle-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleDarkMode,\n            children: darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Made by Vishanth hearsymbol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"py7Yd9iHL7CmNrBdskWH5+K4nZ4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","messages","setMessages","query","setQuery","loading","setLoading","searchEnabled","setSearchEnabled","darkMode","setDarkMode","handleToggleSearch","handleToggleDarkMode","handleSubmit","e","preventDefault","userMessage","sender","text","companyResponse","gptResponse","Promise","all","fetch","method","headers","body","JSON","stringify","then","res","json","botMessage","company","formatCompanyResponse","openAi","response","data","parts","split","openAiResponse","i","length","setTimeout","prevMessages","slice","response_text","replace","urls","web_url","map","url","join","className","children","msg","index","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onSubmit","value","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const userMessage = { sender: 'user', text: query };\n    setMessages([...messages, userMessage]);\n\n    if (searchEnabled) {\n      const [companyResponse, gptResponse] = await Promise.all([\n        fetch('http://localhost:8000/getApi', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json()),\n        fetch('http://localhost:8000/getResponse', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json())\n      ]);\n\n      const botMessage = {\n        sender: 'bot',\n        company: formatCompanyResponse(companyResponse),\n        openAi: gptResponse.response\n      };\n\n      setMessages([...messages, userMessage, botMessage]);\n    } else {\n      const response = await fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query })\n      });\n      \n      const data = await response.json();\n      const parts = data.response.split(\" \");\n      let openAiResponse = \"\";\n\n      for (let i = 0; i < parts.length; i++) {\n        setTimeout(() => {\n          openAiResponse += parts[i] + \" \";\n          const botMessage = {\n            sender: 'bot',\n            company: null,\n            openAi: openAiResponse\n          };\n          setMessages((prevMessages) => [...prevMessages.slice(0, -1), botMessage]);\n        }, i * 100);  // Adjust the speed by changing the timeout duration\n      }\n    }\n\n    setQuery('');\n    setLoading(false);\n  };\n\n  const formatCompanyResponse = (response) => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, '<br/>');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join('<br/>');\n      return `${text}<br/><br/>Sources:<br/>${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n\n  return (\n    <div className={`chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-window-container\">\n        <div className=\"chat-window\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' ? (\n                <div className=\"message-content bot-message\" dangerouslySetInnerHTML={{ __html: searchEnabled ? `<p><strong>Company Response:</strong><br/>${msg.company}</p><p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` : `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` }} />\n              ) : (\n                <div className=\"message-content user-message\">\n                  <strong>User:</strong> {msg.text}\n                </div>\n              )}\n            </div>\n          ))}\n          {loading && <p className=\"loading\">Loading...</p>}\n        </div>\n        {!loading && (\n          <>\n            <div className=\"toggle-container\">\n              <label className=\"toggle-label\">Enable Search</label>\n              <label className=\"toggle-switch\">\n                <input type=\"checkbox\" checked={searchEnabled} onChange={handleToggleSearch} />\n                <span className=\"slider\"></span>\n              </label>\n            </div>\n            <form onSubmit={handleSubmit} className=\"chat-input\">\n              <input\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                placeholder=\"Type your message...\"\n              />\n              <button type=\"submit\">Send</button>\n            </form>\n            <div className=\"mode-toggle-container\">\n              <button onClick={handleToggleDarkMode}>\n                {darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\n              </button>\n            </div>\n          </>\n        )}\n        <footer className=\"footer\">\n          <p>Made by Vishanth hearsymbol</p>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}