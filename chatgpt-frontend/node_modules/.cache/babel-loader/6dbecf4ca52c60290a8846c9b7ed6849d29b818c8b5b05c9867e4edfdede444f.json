{"ast":null,"code":"var _jsxFileName = \"/Users/vhr/traversaal_ai_ChatBot/chatgpt-frontend/src/App.js\";\nimport React from 'react';\nimport Chatbot from './Chatbot';\nimport DataIngestion from './DataInjection';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Home\",\n          component: Chatbot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/datainjestion\",\n          component: DataIngestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n// import logo from './logo.svg';\n// import './App.css';\n// import React, { useState } from 'react';\n\n// function App() {\n\n//   const [companyResponse, setCompanyResponse] = useState('');\n//   const [gptResponse, setGptResponse] = useState('');\n//   const [query, setQuery] = useState('');\n//   const [loading, setLoading] = useState(false);\n\n//   const getCompanyResponse = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     const response = await fetch('http://localhost:8000/getApi', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify({ \"query\": query })\n//     });\n//     const data = await response.json();\n//     setCompanyResponse(data);\n//     setLoading(false);\n//   }\n\n//   const getGptResponse = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     const response = await fetch('http://localhost:8000/getResponse', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify({ \"query\": query })\n//     });\n//     const data = await response.json();\n//     setGptResponse(data);\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div>\n//       <form>\n//         <label>Enter your query:</label><br></br>\n//         <input type=\"text\" value={query} onChange={(e) => setQuery(e.target.value)} /><br></br>\n//         <button type=\"submit\" onClick={getCompanyResponse} >Get Company Response</button><br></br>\n//         <button type=\"submit\" onClick={getGptResponse} >Get GPT Response</button><br></br>\n//       </form>\n//       {loading ? <p>Loading...</p> : <p>{JSON.stringify(companyResponse)}</p>}\n//       {loading ? <p>Loading...</p> : <p>{JSON.stringify(gptResponse)}</p>}\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Chatbot","DataIngestion","BrowserRouter","Router","Route","Routes","jsxDEV","_jsxDEV","App","children","className","path","component","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vhr/traversaal_ai_ChatBot/chatgpt-frontend/src/App.js"],"sourcesContent":["import React from 'react';\nimport Chatbot from './Chatbot';\nimport DataIngestion from './DataInjection';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/Home\" component={Chatbot} />\n          <Route path=\"/datainjestion\" component={DataIngestion} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n\n\n\n\n\n// import logo from './logo.svg';\n// import './App.css';\n// import React, { useState } from 'react';\n\n// function App() {\n\n//   const [companyResponse, setCompanyResponse] = useState('');\n//   const [gptResponse, setGptResponse] = useState('');\n//   const [query, setQuery] = useState('');\n//   const [loading, setLoading] = useState(false);\n\n//   const getCompanyResponse = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     const response = await fetch('http://localhost:8000/getApi', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify({ \"query\": query })\n//     });\n//     const data = await response.json();\n//     setCompanyResponse(data);\n//     setLoading(false);\n//   }\n\n//   const getGptResponse = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     const response = await fetch('http://localhost:8000/getResponse', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify({ \"query\": query })\n//     });\n//     const data = await response.json();\n//     setGptResponse(data);\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div>\n//       <form>\n//         <label>Enter your query:</label><br></br>\n//         <input type=\"text\" value={query} onChange={(e) => setQuery(e.target.value)} /><br></br>\n//         <button type=\"submit\" onClick={getCompanyResponse} >Get Company Response</button><br></br>\n//         <button type=\"submit\" onClick={getGptResponse} >Get GPT Response</button><br></br>\n//       </form>\n//       {loading ? <p>Loading...</p> : <p>{JSON.stringify(companyResponse)}</p>}\n//       {loading ? <p>Loading...</p> : <p>{JSON.stringify(gptResponse)}</p>}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA,CAACJ,MAAM;IAAAM,QAAA,eACLF,OAAA;MAAKG,SAAS,EAAC,KAAK;MAAAD,QAAA,eAClBF,OAAA,CAACF,MAAM;QAAAI,QAAA,gBACLF,OAAA,CAACH,KAAK;UAACO,IAAI,EAAC,OAAO;UAACC,SAAS,EAAEZ;QAAQ;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC1CT,OAAA,CAACH,KAAK;UAACO,IAAI,EAAC,gBAAgB;UAACC,SAAS,EAAEX;QAAc;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAACC,EAAA,GAXQT,GAAG;AAcZ,eAAeA,GAAG;;AAMlB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}