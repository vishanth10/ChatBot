{"ast":null,"code":"var _jsxFileName = \"/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const userMessage = {\n      sender: 'user',\n      text: query\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    const [companyResponse, gptResponse] = await Promise.all([fetch('http://localhost:8000/getApi', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    }).then(res => res.json()), fetch('http://localhost:8000/getResponse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    }).then(res => res.json())]);\n    streamResponses(companyResponse, gptResponse.response);\n    setQuery('');\n    setLoading(false);\n  };\n  const streamResponses = (companyResponse, openAiResponse) => {\n    const companyText = formatCompanyResponse(companyResponse);\n    const openAiParts = openAiResponse.split(\" \");\n    const companyParts = companyText.split(\" \");\n    let streamedCompany = \"\";\n    let streamedOpenAi = \"\";\n    companyParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedCompany += part + \" \";\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.company = streamedCompany;\n          return updatedMessages;\n        });\n      }, i * 100);\n    });\n    openAiParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedOpenAi += part + \" \";\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.openAi = streamedOpenAi;\n          return updatedMessages;\n        });\n      }, (companyParts.length + i) * 100);\n    });\n  };\n  const formatCompanyResponse = response => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, ' ');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join(' ');\n      return `${text} Sources: ${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: darkMode,\n            onChange: handleToggleDarkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.sender === 'bot' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content bot-message\",\n            children: [msg.company && /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content user-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this), \" \", msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), !loading && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Made by Vishanth hearsymbol\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"0C+Qvpvxen3hjywrS5CumS3rIGc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","query","setQuery","loading","setLoading","darkMode","setDarkMode","handleToggleDarkMode","handleSubmit","e","preventDefault","userMessage","sender","text","prevMessages","companyResponse","gptResponse","Promise","all","fetch","method","headers","body","JSON","stringify","then","res","json","streamResponses","response","openAiResponse","companyText","formatCompanyResponse","openAiParts","split","companyParts","streamedCompany","streamedOpenAi","forEach","part","i","setTimeout","updatedMessages","lastMessage","length","company","openAi","data","response_text","replace","urls","web_url","map","url","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","msg","index","dangerouslySetInnerHTML","__html","onSubmit","value","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const userMessage = { sender: 'user', text: query };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    const [companyResponse, gptResponse] = await Promise.all([\n      fetch('http://localhost:8000/getApi', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query })\n      }).then(res => res.json()),\n      fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query })\n      }).then(res => res.json())\n    ]);\n\n    streamResponses(companyResponse, gptResponse.response);\n\n    setQuery('');\n    setLoading(false);\n  };\n\n  const streamResponses = (companyResponse, openAiResponse) => {\n    const companyText = formatCompanyResponse(companyResponse);\n    const openAiParts = openAiResponse.split(\" \");\n    const companyParts = companyText.split(\" \");\n    \n    let streamedCompany = \"\";\n    let streamedOpenAi = \"\";\n\n    companyParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedCompany += part + \" \";\n        setMessages((prevMessages) => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.company = streamedCompany;\n          return updatedMessages;\n        });\n      }, i * 100);\n    });\n\n    openAiParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedOpenAi += part + \" \";\n        setMessages((prevMessages) => {\n          const updatedMessages = [...prevMessages];\n          const lastMessage = updatedMessages[updatedMessages.length - 1];\n          lastMessage.openAi = streamedOpenAi;\n          return updatedMessages;\n        });\n      }, (companyParts.length + i) * 100);\n    });\n  };\n\n  const formatCompanyResponse = (response) => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, ' ');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join(' ');\n      return `${text} Sources: ${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n\n  return (\n    <div className={`chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <div className=\"toggle-container\">\n          <label className=\"toggle-label\">Dark Mode</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={handleToggleDarkMode} />\n            <span className=\"slider\"></span>\n          </label>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' ? (\n                <div className=\"message-content bot-message\">\n                  {msg.company && (\n                    <div dangerouslySetInnerHTML={{ __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>` }} />\n                  )}\n                  <div dangerouslySetInnerHTML={{ __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` }} />\n                </div>\n              ) : (\n                <div className=\"message-content user-message\">\n                  <strong>User:</strong> {msg.text}\n                </div>\n              )}\n            </div>\n          ))}\n          {loading && <p className=\"loading\">Loading...</p>}\n        </div>\n        {!loading && (\n          <form onSubmit={handleSubmit} className=\"chat-input\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Type your message...\"\n            />\n            <button type=\"submit\">Send</button>\n          </form>\n        )}\n      </div>\n      <footer className=\"footer\">\n        <p>Made by Vishanth hearsymbol</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}