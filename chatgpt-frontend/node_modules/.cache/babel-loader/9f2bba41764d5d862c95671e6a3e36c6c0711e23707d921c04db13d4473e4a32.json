{"ast":null,"code":"var _jsxFileName = \"/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const userMessage = {\n      sender: 'user',\n      text: query\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    if (searchEnabled) {\n      const [companyResponse, gptResponse] = await Promise.all([fetch('http://localhost:8000/getApi', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json()), fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json())]);\n      streamResponses(formatCompanyResponse(companyResponse), gptResponse.response);\n    } else {\n      const gptResponse = await fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json());\n      streamResponses(null, gptResponse.response);\n    }\n    setQuery('');\n    setLoading(false);\n  };\n  const streamResponses = (companyResponse, openAiResponse) => {\n    const companyParts = companyResponse ? companyResponse.split(' ') : [];\n    const openAiParts = openAiResponse.split(' ');\n    let streamedCompany = '';\n    let streamedOpenAi = '';\n    if (companyResponse) {\n      companyParts.forEach((part, i) => {\n        setTimeout(() => {\n          streamedCompany += part + ' ';\n          const botMessage = {\n            sender: 'bot',\n            openAi: streamedOpenAi,\n            company: streamedCompany\n          };\n          setMessages(prevMessages => [...prevMessages.slice(0, -1), botMessage]);\n        }, i * 100);\n      });\n    }\n    openAiParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedOpenAi += part + ' ';\n        const botMessage = {\n          sender: 'bot',\n          company: streamedCompany,\n          openAi: streamedOpenAi\n        };\n        setMessages(prevMessages => [...prevMessages.slice(0, -1), botMessage]);\n      }, (companyParts.length + i) * 100);\n    });\n  };\n  const formatCompanyResponse = response => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, ' ');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join(' ');\n      return `${text} Sources: ${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Enable Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: searchEnabled,\n            onChange: handleToggleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: darkMode,\n            onChange: handleToggleDarkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.sender === 'bot' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content bot-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this), msg.company && /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content user-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this), \" \", msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), !loading && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Made by Vishanth hearsymbol\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"py7Yd9iHL7CmNrBdskWH5+K4nZ4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","query","setQuery","loading","setLoading","searchEnabled","setSearchEnabled","darkMode","setDarkMode","handleToggleSearch","handleToggleDarkMode","handleSubmit","e","preventDefault","userMessage","sender","text","prevMessages","companyResponse","gptResponse","Promise","all","fetch","method","headers","body","JSON","stringify","then","res","json","streamResponses","formatCompanyResponse","response","openAiResponse","companyParts","split","openAiParts","streamedCompany","streamedOpenAi","forEach","part","i","setTimeout","botMessage","openAi","company","slice","length","data","response_text","replace","urls","web_url","map","url","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","msg","index","dangerouslySetInnerHTML","__html","onSubmit","value","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const userMessage = { sender: 'user', text: query };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    if (searchEnabled) {\n      const [companyResponse, gptResponse] = await Promise.all([\n        fetch('http://localhost:8000/getApi', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json()),\n        fetch('http://localhost:8000/getResponse', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json())\n      ]);\n\n      streamResponses(formatCompanyResponse(companyResponse), gptResponse.response);\n    } else {\n      const gptResponse = await fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query })\n      }).then(res => res.json());\n\n      streamResponses(null, gptResponse.response);\n    }\n\n    setQuery('');\n    setLoading(false);\n  };\n\n  const streamResponses = (companyResponse, openAiResponse) => {\n    const companyParts = companyResponse ? companyResponse.split(' ') : [];\n    const openAiParts = openAiResponse.split(' ');\n\n    let streamedCompany = '';\n    let streamedOpenAi = '';\n\n    if (companyResponse) {\n      companyParts.forEach((part, i) => {\n        setTimeout(() => {\n          streamedCompany += part + ' ';\n          const botMessage = {\n            sender: 'bot',\n            openAi: streamedOpenAi,\n            company: streamedCompany\n            \n          };\n          setMessages((prevMessages) => [...prevMessages.slice(0, -1), botMessage]);\n        }, i * 100);\n      });\n    }\n\n    openAiParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedOpenAi += part + ' ';\n        const botMessage = {\n          sender: 'bot',\n          company: streamedCompany,\n          openAi: streamedOpenAi\n        };\n        setMessages((prevMessages) => [...prevMessages.slice(0, -1), botMessage]);\n      }, (companyParts.length + i) * 100);\n    });\n  };\n\n  const formatCompanyResponse = (response) => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, ' ');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join(' ');\n      return `${text} Sources: ${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n\n  return (\n    <div className={`chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <div className=\"toggle-container\">\n          <label className=\"toggle-label\">Enable Search</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={searchEnabled} onChange={handleToggleSearch} />\n            <span className=\"slider\"></span>\n          </label>\n          <label className=\"toggle-label\">Dark Mode</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={handleToggleDarkMode} />\n            <span className=\"slider\"></span>\n          </label>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' ? (\n                <div className=\"message-content bot-message\">\n                  <div dangerouslySetInnerHTML={{ __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` }} />\n                  {msg.company && (\n                    <div dangerouslySetInnerHTML={{ __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>` }} />\n                  )}\n                </div>\n              ) : (\n                <div className=\"message-content user-message\">\n                  <strong>User:</strong> {msg.text}\n                </div>\n              )}\n            </div>\n          ))}\n          {loading && <p className=\"loading\">Loading...</p>}\n        </div>\n        {!loading && (\n          <form onSubmit={handleSubmit} className=\"chat-input\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Type your message...\"\n            />\n            <button type=\"submit\">Send</button>\n          </form>\n        )}\n      </div>\n      <footer className=\"footer\">\n        <p>Made by Vishanth hearsymbol</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}