{"ast":null,"code":"var _jsxFileName = \"/Users/vhr/traversaal_ai_ChatBot/chatgpt-frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const userMessage = {\n      sender: 'user',\n      text: query\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    const timeout = new Promise((_, reject) => setTimeout(() => reject(new Error('Request timed out')), 30000));\n    try {\n      if (selectedFile) {\n        const formData = new FormData();\n        formData.append('file', selectedFile);\n        const response = await Promise.race([axios.post('/api/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        }), timeout]);\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `File uploaded successfully: ${selectedFile.name}`\n        }]);\n      } else if (searchEnabled) {\n        let companyResponse = null,\n          gptResponse = null;\n        try {\n          companyResponse = await Promise.race([fetch('http://localhost:8000/getApi', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              query\n            })\n          }).then(res => {\n            if (!res.ok) throw new Error('Company API error');\n            return res.json();\n          }), timeout]);\n          console.log('Company Response:', companyResponse);\n        } catch (error) {\n          console.error('Error fetching Company API:', error);\n        }\n        try {\n          gptResponse = await Promise.race([fetch('http://localhost:8000/getResponse', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              query\n            })\n          }).then(res => {\n            if (!res.ok) throw new Error('OpenAI API error');\n            return res.json();\n          }), timeout]);\n          console.log('OpenAI Response:', gptResponse);\n        } catch (error) {\n          console.error('Error fetching OpenAI API:', error);\n        }\n        if (companyResponse || gptResponse) {\n          streamResponses(companyResponse ? formatCompanyResponse(companyResponse) : null, gptResponse ? formatOpenAiResponse(gptResponse.response) : null);\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: 'Both API requests failed'\n          }]);\n        }\n      } else {\n        const gptResponse = await Promise.race([fetch('http://localhost:8000/getResponse', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        }).then(res => {\n          if (!res.ok) throw new Error('OpenAI API error');\n          return res.json();\n        }), timeout]);\n        console.log('OpenAI Response:', gptResponse);\n        streamResponses(null, formatOpenAiResponse(gptResponse.response));\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Error: ${error.message}`\n      }]);\n    } finally {\n      setQuery('');\n      setLoading(false);\n    }\n  };\n  const streamResponses = (companyResponse, openAiResponse) => {\n    const companyParts = companyResponse ? companyResponse.split(' ') : [];\n    const openAiParts = openAiResponse ? openAiResponse.split(' ') : [];\n    let streamedCompany = '';\n    let streamedOpenAi = '';\n    if (companyResponse) {\n      companyParts.forEach((part, i) => {\n        setTimeout(() => {\n          streamedCompany += part + ' ';\n          const botMessage = {\n            sender: 'bot',\n            company: streamedCompany,\n            openAi: streamedOpenAi\n          };\n          setMessages(prevMessages => {\n            const lastMessage = prevMessages[prevMessages.length - 1];\n            if (lastMessage.sender === 'user') {\n              return [...prevMessages, botMessage];\n            } else {\n              return [...prevMessages.slice(0, -1), botMessage];\n            }\n          });\n        }, i * 100);\n      });\n    }\n    openAiParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedOpenAi += part + ' ';\n        const botMessage = {\n          sender: 'bot',\n          company: streamedCompany,\n          openAi: streamedOpenAi\n        };\n        setMessages(prevMessages => {\n          const lastMessage = prevMessages[prevMessages.length - 1];\n          if (lastMessage.sender === 'user') {\n            return [...prevMessages, botMessage];\n          } else {\n            return [...prevMessages.slice(0, -1), botMessage];\n          }\n        });\n      }, (companyParts.length + i) * 100);\n    });\n  };\n  const formatCompanyResponse = response => {\n    if (response.data && response.data.response_text) {\n      const paragraphs = response.data.response_text.split('\\n').map(paragraph => `<p>${paragraph}</p>`).join('');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join('<br/>');\n      return `${paragraphs}<br/><br/>Sources:<br/>${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n  const formatOpenAiResponse = response => {\n    const paragraphs = response.split('\\n').map(paragraph => `<p>${paragraph}</p>`).join('');\n    return paragraphs;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Enable Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: searchEnabled,\n            onChange: handleToggleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: darkMode,\n            onChange: handleToggleDarkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.sender === 'bot' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content bot-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi || 'No response'}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this), msg.company && /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content user-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), \" \", msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), !loading && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Made by Vishanth\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"+rPU9KvXw1mkN+Z3KlWUqxvElLk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","query","setQuery","loading","setLoading","searchEnabled","setSearchEnabled","darkMode","setDarkMode","selectedFile","setSelectedFile","handleToggleSearch","handleToggleDarkMode","handleFileChange","event","target","files","handleSubmit","e","preventDefault","userMessage","sender","text","prevMessages","timeout","Promise","_","reject","setTimeout","Error","formData","FormData","append","response","race","post","headers","name","companyResponse","gptResponse","fetch","method","body","JSON","stringify","then","res","ok","json","console","log","error","streamResponses","formatCompanyResponse","formatOpenAiResponse","message","openAiResponse","companyParts","split","openAiParts","streamedCompany","streamedOpenAi","forEach","part","i","botMessage","company","openAi","lastMessage","length","slice","data","response_text","paragraphs","map","paragraph","join","urls","web_url","url","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","msg","index","dangerouslySetInnerHTML","__html","onSubmit","value","placeholder","_c","$RefreshReg$"],"sources":["/Users/vhr/traversaal_ai_ChatBot/chatgpt-frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const userMessage = { sender: 'user', text: query };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    const timeout = new Promise((_, reject) =>\n      setTimeout(() => reject(new Error('Request timed out')), 30000)\n    );\n\n    try {\n      if (selectedFile) {\n        const formData = new FormData();\n        formData.append('file', selectedFile);\n\n        const response = await Promise.race([\n          axios.post('/api/upload', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }),\n          timeout\n        ]);\n\n        setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `File uploaded successfully: ${selectedFile.name}` }]);\n      } else if (searchEnabled) {\n        let companyResponse = null, gptResponse = null;\n\n        try {\n          companyResponse = await Promise.race([\n            fetch('http://localhost:8000/getApi', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ query })\n            }).then(res => {\n              if (!res.ok) throw new Error('Company API error');\n              return res.json();\n            }),\n            timeout\n          ]);\n\n          console.log('Company Response:', companyResponse);\n        } catch (error) {\n          console.error('Error fetching Company API:', error);\n        }\n\n        try {\n          gptResponse = await Promise.race([\n            fetch('http://localhost:8000/getResponse', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ query })\n            }).then(res => {\n              if (!res.ok) throw new Error('OpenAI API error');\n              return res.json();\n            }),\n            timeout\n          ]);\n\n          console.log('OpenAI Response:', gptResponse);\n        } catch (error) {\n          console.error('Error fetching OpenAI API:', error);\n        }\n\n        if (companyResponse || gptResponse) {\n          streamResponses(\n            companyResponse ? formatCompanyResponse(companyResponse) : null,\n            gptResponse ? formatOpenAiResponse(gptResponse.response) : null\n          );\n        } else {\n          setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: 'Both API requests failed' }]);\n        }\n      } else {\n        const gptResponse = await Promise.race([\n          fetch('http://localhost:8000/getResponse', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ query })\n          }).then(res => {\n            if (!res.ok) throw new Error('OpenAI API error');\n            return res.json();\n          }),\n          timeout\n        ]);\n\n        console.log('OpenAI Response:', gptResponse);\n\n        streamResponses(null, formatOpenAiResponse(gptResponse.response));\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Error: ${error.message}` }]);\n    } finally {\n      setQuery('');\n      setLoading(false);\n    }\n  };\n\n  const streamResponses = (companyResponse, openAiResponse) => {\n    const companyParts = companyResponse ? companyResponse.split(' ') : [];\n    const openAiParts = openAiResponse ? openAiResponse.split(' ') : [];\n\n    let streamedCompany = '';\n    let streamedOpenAi = '';\n\n    if (companyResponse) {\n      companyParts.forEach((part, i) => {\n        setTimeout(() => {\n          streamedCompany += part + ' ';\n          const botMessage = {\n            sender: 'bot',\n            company: streamedCompany,\n            openAi: streamedOpenAi\n          };\n          setMessages((prevMessages) => {\n            const lastMessage = prevMessages[prevMessages.length - 1];\n            if (lastMessage.sender === 'user') {\n              return [...prevMessages, botMessage];\n            } else {\n              return [...prevMessages.slice(0, -1), botMessage];\n            }\n          });\n        }, i * 100);\n      });\n    }\n\n    openAiParts.forEach((part, i) => {\n      setTimeout(() => {\n        streamedOpenAi += part + ' ';\n        const botMessage = {\n          sender: 'bot',\n          company: streamedCompany,\n          openAi: streamedOpenAi\n        };\n        setMessages((prevMessages) => {\n          const lastMessage = prevMessages[prevMessages.length - 1];\n          if (lastMessage.sender === 'user') {\n            return [...prevMessages, botMessage];\n          } else {\n            return [...prevMessages.slice(0, -1), botMessage];\n          }\n        });\n      }, (companyParts.length + i) * 100);\n    });\n  };\n\n  const formatCompanyResponse = (response) => {\n    if (response.data && response.data.response_text) {\n      const paragraphs = response.data.response_text.split('\\n').map(paragraph => `<p>${paragraph}</p>`).join('');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join('<br/>');\n      return `${paragraphs}<br/><br/>Sources:<br/>${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n\n  const formatOpenAiResponse = (response) => {\n    const paragraphs = response.split('\\n').map(paragraph => `<p>${paragraph}</p>`).join('');\n    return paragraphs;\n  };\n\n  return (\n    <div className={`chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <div className=\"toggle-container\">\n          <label className=\"toggle-label\">Enable Search</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={searchEnabled} onChange={handleToggleSearch} />\n            <span className=\"slider\"></span>\n          </label>\n          <label className=\"toggle-label\">Dark Mode</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={handleToggleDarkMode} />\n            <span className=\"slider\"></span>\n          </label>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' ? (\n                <div className=\"message-content bot-message\">\n                  <div dangerouslySetInnerHTML={{ __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi || 'No response'}</p>` }} />\n                  {msg.company && (\n                    <div dangerouslySetInnerHTML={{ __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>` }} />\n                  )}\n                </div>\n              ) : (\n                <div className=\"message-content user-message\">\n                  <strong>User:</strong> {msg.text}\n                </div>\n              )}\n            </div>\n          ))}\n          {loading && <p className=\"loading\">Loading...</p>}\n        </div>\n        {!loading && (\n          <form onSubmit={handleSubmit} className=\"chat-input\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Type your message...\"\n            />\n            <input type=\"file\" onChange={handleFileChange} />\n            <button type=\"submit\">Send</button>\n          </form>\n        )}\n      </div>\n      <footer className=\"footer\">\n        <p>Made by Vishanth</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMkB,kBAAkB,GAAGA,CAAA,KAAM;IAC/BL,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;EAED,MAAMO,oBAAoB,GAAGA,CAAA,KAAM;IACjCJ,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMM,gBAAgB,GAAIC,KAAK,IAAK;IAClCJ,eAAe,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBf,UAAU,CAAC,IAAI,CAAC;IAEhB,MAAMgB,WAAW,GAAG;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAErB;IAAM,CAAC;IACnDD,WAAW,CAAEuB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,WAAW,CAAC,CAAC;IAE7D,MAAMI,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,CAAC,EAAEC,MAAM,KACpCC,UAAU,CAAC,MAAMD,MAAM,CAAC,IAAIE,KAAK,CAAC,mBAAmB,CAAC,CAAC,EAAE,KAAK,CAChE,CAAC;IAED,IAAI;MACF,IAAIpB,YAAY,EAAE;QAChB,MAAMqB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEvB,YAAY,CAAC;QAErC,MAAMwB,QAAQ,GAAG,MAAMR,OAAO,CAACS,IAAI,CAAC,CAClCxC,KAAK,CAACyC,IAAI,CAAC,aAAa,EAAEL,QAAQ,EAAE;UAClCM,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC,EACFZ,OAAO,CACR,CAAC;QAEFxB,WAAW,CAAEuB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;UAAEF,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAG,+BAA8Bb,YAAY,CAAC4B,IAAK;QAAE,CAAC,CAAC,CAAC;MAC/H,CAAC,MAAM,IAAIhC,aAAa,EAAE;QACxB,IAAIiC,eAAe,GAAG,IAAI;UAAEC,WAAW,GAAG,IAAI;QAE9C,IAAI;UACFD,eAAe,GAAG,MAAMb,OAAO,CAACS,IAAI,CAAC,CACnCM,KAAK,CAAC,8BAA8B,EAAE;YACpCC,MAAM,EAAE,MAAM;YACdL,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAE3C;YAAM,CAAC;UAChC,CAAC,CAAC,CAAC4C,IAAI,CAACC,GAAG,IAAI;YACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE,MAAM,IAAIlB,KAAK,CAAC,mBAAmB,CAAC;YACjD,OAAOiB,GAAG,CAACE,IAAI,CAAC,CAAC;UACnB,CAAC,CAAC,EACFxB,OAAO,CACR,CAAC;UAEFyB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEZ,eAAe,CAAC;QACnD,CAAC,CAAC,OAAOa,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;QAEA,IAAI;UACFZ,WAAW,GAAG,MAAMd,OAAO,CAACS,IAAI,CAAC,CAC/BM,KAAK,CAAC,mCAAmC,EAAE;YACzCC,MAAM,EAAE,MAAM;YACdL,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAE3C;YAAM,CAAC;UAChC,CAAC,CAAC,CAAC4C,IAAI,CAACC,GAAG,IAAI;YACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE,MAAM,IAAIlB,KAAK,CAAC,kBAAkB,CAAC;YAChD,OAAOiB,GAAG,CAACE,IAAI,CAAC,CAAC;UACnB,CAAC,CAAC,EACFxB,OAAO,CACR,CAAC;UAEFyB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEX,WAAW,CAAC;QAC9C,CAAC,CAAC,OAAOY,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QACpD;QAEA,IAAIb,eAAe,IAAIC,WAAW,EAAE;UAClCa,eAAe,CACbd,eAAe,GAAGe,qBAAqB,CAACf,eAAe,CAAC,GAAG,IAAI,EAC/DC,WAAW,GAAGe,oBAAoB,CAACf,WAAW,CAACN,QAAQ,CAAC,GAAG,IAC7D,CAAC;QACH,CAAC,MAAM;UACLjC,WAAW,CAAEuB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;YAAEF,MAAM,EAAE,KAAK;YAAEC,IAAI,EAAE;UAA2B,CAAC,CAAC,CAAC;QACvG;MACF,CAAC,MAAM;QACL,MAAMiB,WAAW,GAAG,MAAMd,OAAO,CAACS,IAAI,CAAC,CACrCM,KAAK,CAAC,mCAAmC,EAAE;UACzCC,MAAM,EAAE,MAAM;UACdL,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAE3C;UAAM,CAAC;QAChC,CAAC,CAAC,CAAC4C,IAAI,CAACC,GAAG,IAAI;UACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE,MAAM,IAAIlB,KAAK,CAAC,kBAAkB,CAAC;UAChD,OAAOiB,GAAG,CAACE,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC,EACFxB,OAAO,CACR,CAAC;QAEFyB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEX,WAAW,CAAC;QAE5Ca,eAAe,CAAC,IAAI,EAAEE,oBAAoB,CAACf,WAAW,CAACN,QAAQ,CAAC,CAAC;MACnE;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BnD,WAAW,CAAEuB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;QAAEF,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAG,UAAS6B,KAAK,CAACI,OAAQ;MAAE,CAAC,CAAC,CAAC;IACtG,CAAC,SAAS;MACRrD,QAAQ,CAAC,EAAE,CAAC;MACZE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMgD,eAAe,GAAGA,CAACd,eAAe,EAAEkB,cAAc,KAAK;IAC3D,MAAMC,YAAY,GAAGnB,eAAe,GAAGA,eAAe,CAACoB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;IACtE,MAAMC,WAAW,GAAGH,cAAc,GAAGA,cAAc,CAACE,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;IAEnE,IAAIE,eAAe,GAAG,EAAE;IACxB,IAAIC,cAAc,GAAG,EAAE;IAEvB,IAAIvB,eAAe,EAAE;MACnBmB,YAAY,CAACK,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;QAChCpC,UAAU,CAAC,MAAM;UACfgC,eAAe,IAAIG,IAAI,GAAG,GAAG;UAC7B,MAAME,UAAU,GAAG;YACjB5C,MAAM,EAAE,KAAK;YACb6C,OAAO,EAAEN,eAAe;YACxBO,MAAM,EAAEN;UACV,CAAC;UACD7D,WAAW,CAAEuB,YAAY,IAAK;YAC5B,MAAM6C,WAAW,GAAG7C,YAAY,CAACA,YAAY,CAAC8C,MAAM,GAAG,CAAC,CAAC;YACzD,IAAID,WAAW,CAAC/C,MAAM,KAAK,MAAM,EAAE;cACjC,OAAO,CAAC,GAAGE,YAAY,EAAE0C,UAAU,CAAC;YACtC,CAAC,MAAM;cACL,OAAO,CAAC,GAAG1C,YAAY,CAAC+C,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEL,UAAU,CAAC;YACnD;UACF,CAAC,CAAC;QACJ,CAAC,EAAED,CAAC,GAAG,GAAG,CAAC;MACb,CAAC,CAAC;IACJ;IAEAL,WAAW,CAACG,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;MAC/BpC,UAAU,CAAC,MAAM;QACfiC,cAAc,IAAIE,IAAI,GAAG,GAAG;QAC5B,MAAME,UAAU,GAAG;UACjB5C,MAAM,EAAE,KAAK;UACb6C,OAAO,EAAEN,eAAe;UACxBO,MAAM,EAAEN;QACV,CAAC;QACD7D,WAAW,CAAEuB,YAAY,IAAK;UAC5B,MAAM6C,WAAW,GAAG7C,YAAY,CAACA,YAAY,CAAC8C,MAAM,GAAG,CAAC,CAAC;UACzD,IAAID,WAAW,CAAC/C,MAAM,KAAK,MAAM,EAAE;YACjC,OAAO,CAAC,GAAGE,YAAY,EAAE0C,UAAU,CAAC;UACtC,CAAC,MAAM;YACL,OAAO,CAAC,GAAG1C,YAAY,CAAC+C,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEL,UAAU,CAAC;UACnD;QACF,CAAC,CAAC;MACJ,CAAC,EAAE,CAACR,YAAY,CAACY,MAAM,GAAGL,CAAC,IAAI,GAAG,CAAC;IACrC,CAAC,CAAC;EACJ,CAAC;EAED,MAAMX,qBAAqB,GAAIpB,QAAQ,IAAK;IAC1C,IAAIA,QAAQ,CAACsC,IAAI,IAAItC,QAAQ,CAACsC,IAAI,CAACC,aAAa,EAAE;MAChD,MAAMC,UAAU,GAAGxC,QAAQ,CAACsC,IAAI,CAACC,aAAa,CAACd,KAAK,CAAC,IAAI,CAAC,CAACgB,GAAG,CAACC,SAAS,IAAK,MAAKA,SAAU,MAAK,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MAC3G,MAAMC,IAAI,GAAG5C,QAAQ,CAACsC,IAAI,CAACO,OAAO,CAACJ,GAAG,CAACK,GAAG,IAAK,YAAWA,GAAI,qBAAoBA,GAAI,MAAK,CAAC,CAACH,IAAI,CAAC,OAAO,CAAC;MAC1G,OAAQ,GAAEH,UAAW,0BAAyBI,IAAK,EAAC;IACtD;IACA,OAAOlC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAAC;EACjC,CAAC;EAED,MAAMqB,oBAAoB,GAAIrB,QAAQ,IAAK;IACzC,MAAMwC,UAAU,GAAGxC,QAAQ,CAACyB,KAAK,CAAC,IAAI,CAAC,CAACgB,GAAG,CAACC,SAAS,IAAK,MAAKA,SAAU,MAAK,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IACxF,OAAOH,UAAU;EACnB,CAAC;EAED,oBACE7E,OAAA;IAAKoF,SAAS,EAAG,WAAUzE,QAAQ,GAAG,WAAW,GAAG,YAAa,EAAE;IAAA0E,QAAA,gBACjErF,OAAA;MAAKoF,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BrF,OAAA;QAAKoF,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BrF,OAAA;UAAOoF,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrDzF,OAAA;UAAOoF,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC9BrF,OAAA;YAAO0F,IAAI,EAAC,UAAU;YAACC,OAAO,EAAElF,aAAc;YAACmF,QAAQ,EAAE7E;UAAmB;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC/EzF,OAAA;YAAMoF,SAAS,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eACRzF,OAAA;UAAOoF,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACjDzF,OAAA;UAAOoF,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC9BrF,OAAA;YAAO0F,IAAI,EAAC,UAAU;YAACC,OAAO,EAAEhF,QAAS;YAACiF,QAAQ,EAAE5E;UAAqB;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC5EzF,OAAA;YAAMoF,SAAS,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNzF,OAAA;QAAKoF,SAAS,EAAC,aAAa;QAAAC,QAAA,GACzBlF,QAAQ,CAAC2E,GAAG,CAAC,CAACe,GAAG,EAAEC,KAAK,kBACvB9F,OAAA;UAAiBoF,SAAS,EAAG,WAAUS,GAAG,CAACpE,MAAO,EAAE;UAAA4D,QAAA,EACjDQ,GAAG,CAACpE,MAAM,KAAK,KAAK,gBACnBzB,OAAA;YAAKoF,SAAS,EAAC,6BAA6B;YAAAC,QAAA,gBAC1CrF,OAAA;cAAK+F,uBAAuB,EAAE;gBAAEC,MAAM,EAAG,4CAA2CH,GAAG,CAACtB,MAAM,IAAI,aAAc;cAAM;YAAE;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EAC1HI,GAAG,CAACvB,OAAO,iBACVtE,OAAA;cAAK+F,uBAAuB,EAAE;gBAAEC,MAAM,EAAG,6CAA4CH,GAAG,CAACvB,OAAQ;cAAM;YAAE;cAAAgB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAC5G;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,gBAENzF,OAAA;YAAKoF,SAAS,EAAC,8BAA8B;YAAAC,QAAA,gBAC3CrF,OAAA;cAAAqF,QAAA,EAAQ;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACI,GAAG,CAACnE,IAAI;UAAA;YAAA4D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B;QACN,GAZOK,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaV,CACN,CAAC,EACDlF,OAAO,iBAAIP,OAAA;UAAGoF,SAAS,EAAC,SAAS;UAAAC,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,EACL,CAAClF,OAAO,iBACPP,OAAA;QAAMiG,QAAQ,EAAE5E,YAAa;QAAC+D,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAClDrF,OAAA;UACE0F,IAAI,EAAC,MAAM;UACXQ,KAAK,EAAE7F,KAAM;UACbuF,QAAQ,EAAGtE,CAAC,IAAKhB,QAAQ,CAACgB,CAAC,CAACH,MAAM,CAAC+E,KAAK,CAAE;UAC1CC,WAAW,EAAC;QAAsB;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC,eACFzF,OAAA;UAAO0F,IAAI,EAAC,MAAM;UAACE,QAAQ,EAAE3E;QAAiB;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACjDzF,OAAA;UAAQ0F,IAAI,EAAC,QAAQ;UAAAL,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACNzF,OAAA;MAAQoF,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACxBrF,OAAA;QAAAqF,QAAA,EAAG;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACvF,EAAA,CAzOID,OAAO;AAAAmG,EAAA,GAAPnG,OAAO;AA2Ob,eAAeA,OAAO;AAAC,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}