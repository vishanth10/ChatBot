{"ast":null,"code":"var _jsxFileName = \"/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const userMessage = {\n      sender: 'user',\n      text: query\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    if (searchEnabled) {\n      const [companyResponse, gptResponse] = await Promise.all([fetch('http://localhost:8000/getApi', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json()), fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      }).then(res => res.json())]);\n      const botMessage = {\n        sender: 'bot',\n        company: formatCompanyResponse(companyResponse),\n        openAi: gptResponse.response\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } else {\n      const response = await fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      const data = await response.json();\n      const parts = data.response.split(\" \");\n      let openAiResponse = \"\";\n      parts.forEach((part, i) => {\n        setTimeout(() => {\n          openAiResponse += part + \" \";\n          const botMessage = {\n            sender: 'bot',\n            company: null,\n            openAi: openAiResponse\n          };\n          setMessages(prevMessages => [...prevMessages.slice(0, -1), botMessage]);\n        }, i * 100); // Adjust the speed by changing the timeout duration\n      });\n    }\n    setQuery('');\n    setLoading(false);\n  };\n  const formatCompanyResponse = response => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, '<br/>');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join('<br/>');\n      return `${text}<br/><br/>Sources:<br/>${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Enable Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: searchEnabled,\n            onChange: handleToggleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: \"Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: darkMode,\n            onChange: handleToggleDarkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.sender === 'bot' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content bot-message\",\n            children: [searchEnabled && msg.company && /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content user-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), \" \", msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), !loading && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Made by Vishanth hearsymbol\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"py7Yd9iHL7CmNrBdskWH5+K4nZ4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","query","setQuery","loading","setLoading","searchEnabled","setSearchEnabled","darkMode","setDarkMode","handleToggleSearch","handleToggleDarkMode","handleSubmit","e","preventDefault","userMessage","sender","text","prevMessages","companyResponse","gptResponse","Promise","all","fetch","method","headers","body","JSON","stringify","then","res","json","botMessage","company","formatCompanyResponse","openAi","response","data","parts","split","openAiResponse","forEach","part","i","setTimeout","slice","response_text","replace","urls","web_url","map","url","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","msg","index","dangerouslySetInnerHTML","__html","onSubmit","value","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/vhr/Chatgpt_replica/chatgpt-frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleToggleSearch = () => {\n    setSearchEnabled(!searchEnabled);\n  };\n\n  const handleToggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const userMessage = { sender: 'user', text: query };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    if (searchEnabled) {\n      const [companyResponse, gptResponse] = await Promise.all([\n        fetch('http://localhost:8000/getApi', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json()),\n        fetch('http://localhost:8000/getResponse', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query })\n        }).then(res => res.json())\n      ]);\n\n      const botMessage = {\n        sender: 'bot',\n        company: formatCompanyResponse(companyResponse),\n        openAi: gptResponse.response\n      };\n\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\n    } else {\n      const response = await fetch('http://localhost:8000/getResponse', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query })\n      });\n      \n      const data = await response.json();\n      const parts = data.response.split(\" \");\n      let openAiResponse = \"\";\n\n      parts.forEach((part, i) => {\n        setTimeout(() => {\n          openAiResponse += part + \" \";\n          const botMessage = {\n            sender: 'bot',\n            company: null,\n            openAi: openAiResponse\n          };\n          setMessages((prevMessages) => [...prevMessages.slice(0, -1), botMessage]);\n        }, i * 100);  // Adjust the speed by changing the timeout duration\n      });\n    }\n\n    setQuery('');\n    setLoading(false);\n  };\n\n  const formatCompanyResponse = (response) => {\n    if (response.data && response.data.response_text) {\n      const text = response.data.response_text.replace(/\\n/g, '<br/>');\n      const urls = response.data.web_url.map(url => `<a href=\"${url}\" target=\"_blank\">${url}</a>`).join('<br/>');\n      return `${text}<br/><br/>Sources:<br/>${urls}`;\n    }\n    return JSON.stringify(response);\n  };\n\n  return (\n    <div className={`chatbot ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <div className=\"toggle-container\">\n          <label className=\"toggle-label\">Enable Search</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={searchEnabled} onChange={handleToggleSearch} />\n            <span className=\"slider\"></span>\n          </label>\n          <label className=\"toggle-label\">Dark Mode</label>\n          <label className=\"toggle-switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={handleToggleDarkMode} />\n            <span className=\"slider\"></span>\n          </label>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' ? (\n                <div className=\"message-content bot-message\">\n                  {searchEnabled && msg.company && (\n                    <div dangerouslySetInnerHTML={{ __html: `<p><strong>Company Response:</strong><br/>${msg.company}</p>` }} />\n                  )}\n                  <div dangerouslySetInnerHTML={{ __html: `<p><strong>OpenAI Response:</strong><br/>${msg.openAi}</p>` }} />\n                </div>\n              ) : (\n                <div className=\"message-content user-message\">\n                  <strong>User:</strong> {msg.text}\n                </div>\n              )}\n            </div>\n          ))}\n          {loading && <p className=\"loading\">Loading...</p>}\n        </div>\n        {!loading && (\n          <form onSubmit={handleSubmit} className=\"chat-input\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Type your message...\"\n            />\n            <button type=\"submit\">Send</button>\n          </form>\n        )}\n      </div>\n      <footer className=\"footer\">\n        <p>Made by Vishanth hearsymbol</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}